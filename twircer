#!/usr/bin/perl

use strict;
use warnings;
use Net::Twitter;
use POE qw(Component::IRC::State);
use Try::Tiny;
use YAML::Tiny qw(LoadFile);

# PERL IS UNREADABLE
# SHOULD NOT BE USED FOR NEW DEVELOPMENT
# FORGIVE ME GOD

my $config_file = $ENV{HOME} . '/.twircer/config';

die "Unable to open config file.\n" unless -e $config_file;

chmod 0600, $config_file;

my $config = LoadFile( $config_file );

die "Please setup your configuration file!\n" if defined $config->{edited};

my $nick     = $config->{nick}     || die "Error: No nick defined.\n";
my $server   = $config->{server}   || die "Error: No server defined.\n";
my $channels = $config->{channels} || die "Error: No channels defined.\n";
my $username = $config->{username} || die "Error: No username defined.\n";
my $password = $config->{password} || die "Error: No password defined.\n";
my $trigger  = $config->{trigger}  || die "Error: No trigger defined.\n";

my ( $irc, $twitter, $mention_id );

POE::Session->create( 
    package_states => [ 
        'main' => [ 
            qw(_start irc_001 irc_public check_mentions) 
        ], 
    ], 
);

$poe_kernel->run();
exit 0;

sub _start {
   $irc = POE::Component::IRC::State->spawn(
      nick     => $nick,
      username => $nick,
      server   => $server,
      debug    => 1,
   ) or die "Unable to spawn IRC session.\n";

   $irc->yield( register => 'all' );
   $irc->yield( connect  => {} );

   $twitter = Net::Twitter->new(
      username        => $username,
      password        => $password,
      traits          => [qw(API::REST RetryOnError)],
      useragent_class => 'LWP::UserAgent::POE',
      source          => '',
   );

   my $mentions = $twitter->mentions();
   $mention_id  = $mentions->[0]->{id};

   $_[KERNEL]->delay( check_mentions => 60 );
}

sub irc_001 {
   for my $chan ( @$channels ) {
      $irc->yield( join => $chan );
   }
}

sub irc_public {
   my ( $who, $where, $msg ) = @_[ ARG0 .. ARG2 ];

   # ignore messages from self
   my ( $sender_nick ) = split /!/, $who;
   return if $sender_nick eq $nick;

   my $channel = $where->[0];

   if ( $msg eq '@followers' ) {

      my $followfile = $ENV{HOME} . '/public_html/followers';

      open my $fh, '>', $followfile or do {
         $irc->yield( privmsg => $channel, "Error: Unable to open $followfile" );
         return;
      };
      chmod 0644, $followfile;

      my $followers = _get_followers();
      my $amount    = @$followers;

      print $fh $_->{screen_name}, "\n" for @$followers;

      my $whoami = getpwuid($<);
      $irc->yield(
         privmsg => $channel,
         "$amount followers. See http://www.redbrick.dcu.ie/~$whoami/followers"
      );
   }

   # Line doesn't contain trigger, ignore
   return unless $msg =~ /\b\Q$trigger\E\b/;

   # Assume 'foo: ' is addressing the nick foo, and ignore
   return if $msg =~ /^[^:]+: /;

   # Ignore messages that contain lowercase letters
   # Except lines that begin with '@'
   # This allows tweets to be addressed to other twats
   if ( $msg =~ /^@\w+ / or $msg !~ /[a-z]/ ) {

      if ( length $msg > 140 ) {
         my $error
            = 'Your message was too long: '
            . ( length $msg )
            . ' chars. ACCESS DENIED.';
         $irc->yield( privmsg => $channel, $error );
         return;
      }

      if ( $msg =~ /^@\Q$nick / ) {
         my $error = "I'm not going to tweet myself you fucking retard.";
         $irc->yield( privmsg => $channel, $error );
         return;
      }

      try {
         $twitter->update($msg);
      }
      catch {
         warn "Unable to tweet: $_";
         $irc->yield( privmsg => $channel, 'ACHTUNG!!! Failed to tweet!' );
      };
   }
}

sub _get_followers {

   # Example taken from Net::Twitter docs
   # PAGING APPEARS TO BE PAINFULLY SLOW
   my @followers;

   for ( my $cursor = -1, my $r; $cursor; $cursor = $r->{next_cursor} ) {
      try {
         $r = $twitter->followers( { cursor => $cursor } );
      }
      catch {
         warn "Error getting followers: $_";
      };
      push @followers, @{ $r->{users} };
   }
   return \@followers;
}

sub check_mentions {

   $_[KERNEL]->delay( check_mentions => 60 );

   my @mentions;
   try {
      @mentions = @{ $twitter->mentions( { since_id => $mention_id } ) };
   }
   catch {
      warn "Error getting mentions: $_";
   };

   return unless @mentions;

   $mention_id = $mentions[0]->{id};

   for my $mention ( @mentions ) {
      for my $chan ( @$channels ) {
         $irc->yield(
            privmsg => $chan,
            "<$mention->{user}->{screen_name}> $mention->{text}"
         );
      }
   }

}
